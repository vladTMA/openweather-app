name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # отключает отмену остальных задач при сбое одной
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-v2
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip cache purge
        pip install -r requirements.txt --no-cache-dir
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import pytest; print(f'Pytest version: {pytest.__version__}')"
        python -c "from app.main import app; print('App import successful')"

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=100 --statistics || true

    - name: Test with pytest
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=30 -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build --pull -t openweather-app:latest .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8083:8083 \
          -e OPENWEATHER_API_KEY=test_key \
          -e TELEGRAM_BOT_TOKEN=test_token \
          -e DATABASE_URL=sqlite:///test.db \
          openweather-app:latest
        sleep 15
        curl -f http://localhost:8083/health || exit 1
        docker stop test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
