import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = str(Path(__file__).parent.parent)
sys.path.insert(0, project_root)

from dotenv import load_dotenv
from app.lifecycle import AppLifecycle
from app.database_service import DatabaseService

async def check_database():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –°–æ–±–∏—Ä–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    db_host = os.getenv('DB_HOST')
    db_name = os.getenv('DB_NAME')
    db_user = os.getenv('DB_USER')
    db_password = os.getenv('DB_PASSWORD')
    
    if not all([db_host, db_name, db_user, db_password]):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
        return
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    database_url = f"postgresql+asyncpg://{db_user}:{db_password}@{db_host}/{db_name}"
        
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        lifecycle = AppLifecycle()
        await lifecycle.initialize_database(database_url)
        db_service = DatabaseService(lifecycle.get_session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        cities = {
            "524901": "–ú–æ—Å–∫–≤–∞",
            "498817": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "504341": "–ü—Å–∫–æ–≤",
            "792680": "–ë–µ–ª–≥—Ä–∞–¥"
        }
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 50)
        
        for city_id, city_name in cities.items():
            record = await db_service.get_latest_weather(city_id)
            print(f"\nüìç {city_name} ({city_id}):")
            if record:
                print(f"  üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {record['temperature']}¬∞C")
                print(f"  üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {record['humidity']}%")
                print(f"  üí® –í–µ—Ç–µ—Ä: {record['wind_speed']} –º/—Å")
                print(f"  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {record['description']}")
                print(f"  üïí –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ (–ú–°–ö): {record['recorded_at_moscow'].strftime('%d.%m.%Y %H:%M:%S')}")
            else:
                print("  ‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        print("\n" + "=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if 'lifecycle' in locals():
            await lifecycle.cleanup()

if __name__ == "__main__":
    asyncio.run(check_database()) 